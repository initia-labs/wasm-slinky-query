// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `slinky_oracle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CurrencyPair)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CurrencyPair {
    // message fields
    // @@protoc_insertion_point(field:CurrencyPair.Base)
    pub Base: ::std::string::String,
    // @@protoc_insertion_point(field:CurrencyPair.Quote)
    pub Quote: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:CurrencyPair.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CurrencyPair {
    fn default() -> &'a CurrencyPair {
        <CurrencyPair as ::protobuf::Message>::default_instance()
    }
}

impl CurrencyPair {
    pub fn new() -> CurrencyPair {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Base",
            |m: &CurrencyPair| { &m.Base },
            |m: &mut CurrencyPair| { &mut m.Base },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Quote",
            |m: &CurrencyPair| { &m.Quote },
            |m: &mut CurrencyPair| { &mut m.Quote },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CurrencyPair>(
            "CurrencyPair",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CurrencyPair {
    const NAME: &'static str = "CurrencyPair";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Base = is.read_string()?;
                },
                18 => {
                    self.Quote = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Base.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Base);
        }
        if !self.Quote.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Quote);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Base.is_empty() {
            os.write_string(1, &self.Base)?;
        }
        if !self.Quote.is_empty() {
            os.write_string(2, &self.Quote)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CurrencyPair {
        CurrencyPair::new()
    }

    fn clear(&mut self) {
        self.Base.clear();
        self.Quote.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CurrencyPair {
        static instance: CurrencyPair = CurrencyPair {
            Base: ::std::string::String::new(),
            Quote: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CurrencyPair {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CurrencyPair").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CurrencyPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CurrencyPair {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:QuotePrice)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QuotePrice {
    // message fields
    // @@protoc_insertion_point(field:QuotePrice.price)
    pub price: ::std::string::String,
    // @@protoc_insertion_point(field:QuotePrice.block_timestamp)
    pub block_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:QuotePrice.block_height)
    pub block_height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:QuotePrice.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuotePrice {
    fn default() -> &'a QuotePrice {
        <QuotePrice as ::protobuf::Message>::default_instance()
    }
}

impl QuotePrice {
    pub fn new() -> QuotePrice {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &QuotePrice| { &m.price },
            |m: &mut QuotePrice| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "block_timestamp",
            |m: &QuotePrice| { &m.block_timestamp },
            |m: &mut QuotePrice| { &mut m.block_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_height",
            |m: &QuotePrice| { &m.block_height },
            |m: &mut QuotePrice| { &mut m.block_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuotePrice>(
            "QuotePrice",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuotePrice {
    const NAME: &'static str = "QuotePrice";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.price = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block_timestamp)?;
                },
                24 => {
                    self.block_height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price);
        }
        if let Some(v) = self.block_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.block_height != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.block_height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.price.is_empty() {
            os.write_string(1, &self.price)?;
        }
        if let Some(v) = self.block_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.block_height != 0 {
            os.write_uint64(3, self.block_height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuotePrice {
        QuotePrice::new()
    }

    fn clear(&mut self) {
        self.price.clear();
        self.block_timestamp.clear();
        self.block_height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuotePrice {
        static instance: QuotePrice = QuotePrice {
            price: ::std::string::String::new(),
            block_timestamp: ::protobuf::MessageField::none(),
            block_height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuotePrice {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuotePrice").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuotePrice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuotePrice {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetAllCurrencyPairsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAllCurrencyPairsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetAllCurrencyPairsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllCurrencyPairsRequest {
    fn default() -> &'a GetAllCurrencyPairsRequest {
        <GetAllCurrencyPairsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAllCurrencyPairsRequest {
    pub fn new() -> GetAllCurrencyPairsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllCurrencyPairsRequest>(
            "GetAllCurrencyPairsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllCurrencyPairsRequest {
    const NAME: &'static str = "GetAllCurrencyPairsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllCurrencyPairsRequest {
        GetAllCurrencyPairsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllCurrencyPairsRequest {
        static instance: GetAllCurrencyPairsRequest = GetAllCurrencyPairsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAllCurrencyPairsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllCurrencyPairsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllCurrencyPairsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllCurrencyPairsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetAllCurrencyPairsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAllCurrencyPairsResponse {
    // message fields
    // @@protoc_insertion_point(field:GetAllCurrencyPairsResponse.currency_pairs)
    pub currency_pairs: ::std::vec::Vec<CurrencyPair>,
    // special fields
    // @@protoc_insertion_point(special_field:GetAllCurrencyPairsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllCurrencyPairsResponse {
    fn default() -> &'a GetAllCurrencyPairsResponse {
        <GetAllCurrencyPairsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetAllCurrencyPairsResponse {
    pub fn new() -> GetAllCurrencyPairsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "currency_pairs",
            |m: &GetAllCurrencyPairsResponse| { &m.currency_pairs },
            |m: &mut GetAllCurrencyPairsResponse| { &mut m.currency_pairs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllCurrencyPairsResponse>(
            "GetAllCurrencyPairsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllCurrencyPairsResponse {
    const NAME: &'static str = "GetAllCurrencyPairsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.currency_pairs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.currency_pairs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.currency_pairs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllCurrencyPairsResponse {
        GetAllCurrencyPairsResponse::new()
    }

    fn clear(&mut self) {
        self.currency_pairs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllCurrencyPairsResponse {
        static instance: GetAllCurrencyPairsResponse = GetAllCurrencyPairsResponse {
            currency_pairs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAllCurrencyPairsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllCurrencyPairsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllCurrencyPairsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllCurrencyPairsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetPriceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPriceRequest {
    // message fields
    // @@protoc_insertion_point(field:GetPriceRequest.currency_pair)
    pub currency_pair: ::protobuf::MessageField<CurrencyPair>,
    // special fields
    // @@protoc_insertion_point(special_field:GetPriceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPriceRequest {
    fn default() -> &'a GetPriceRequest {
        <GetPriceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPriceRequest {
    pub fn new() -> GetPriceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CurrencyPair>(
            "currency_pair",
            |m: &GetPriceRequest| { &m.currency_pair },
            |m: &mut GetPriceRequest| { &mut m.currency_pair },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPriceRequest>(
            "GetPriceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPriceRequest {
    const NAME: &'static str = "GetPriceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.currency_pair)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.currency_pair.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.currency_pair.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPriceRequest {
        GetPriceRequest::new()
    }

    fn clear(&mut self) {
        self.currency_pair.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPriceRequest {
        static instance: GetPriceRequest = GetPriceRequest {
            currency_pair: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPriceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPriceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPriceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPriceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetPriceResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPriceResponse {
    // message fields
    // @@protoc_insertion_point(field:GetPriceResponse.price)
    pub price: ::protobuf::MessageField<QuotePrice>,
    // @@protoc_insertion_point(field:GetPriceResponse.nonce)
    pub nonce: u64,
    // @@protoc_insertion_point(field:GetPriceResponse.decimals)
    pub decimals: u64,
    // @@protoc_insertion_point(field:GetPriceResponse.id)
    pub id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:GetPriceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPriceResponse {
    fn default() -> &'a GetPriceResponse {
        <GetPriceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPriceResponse {
    pub fn new() -> GetPriceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, QuotePrice>(
            "price",
            |m: &GetPriceResponse| { &m.price },
            |m: &mut GetPriceResponse| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &GetPriceResponse| { &m.nonce },
            |m: &mut GetPriceResponse| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "decimals",
            |m: &GetPriceResponse| { &m.decimals },
            |m: &mut GetPriceResponse| { &mut m.decimals },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetPriceResponse| { &m.id },
            |m: &mut GetPriceResponse| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPriceResponse>(
            "GetPriceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPriceResponse {
    const NAME: &'static str = "GetPriceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.price)?;
                },
                16 => {
                    self.nonce = is.read_uint64()?;
                },
                24 => {
                    self.decimals = is.read_uint64()?;
                },
                32 => {
                    self.id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.price.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.nonce);
        }
        if self.decimals != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.decimals);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.price.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.nonce != 0 {
            os.write_uint64(2, self.nonce)?;
        }
        if self.decimals != 0 {
            os.write_uint64(3, self.decimals)?;
        }
        if self.id != 0 {
            os.write_uint64(4, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPriceResponse {
        GetPriceResponse::new()
    }

    fn clear(&mut self) {
        self.price.clear();
        self.nonce = 0;
        self.decimals = 0;
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPriceResponse {
        static instance: GetPriceResponse = GetPriceResponse {
            price: ::protobuf::MessageField::none(),
            nonce: 0,
            decimals: 0,
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPriceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPriceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPriceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPriceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetPricesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPricesRequest {
    // message fields
    // @@protoc_insertion_point(field:GetPricesRequest.currency_pair_ids)
    pub currency_pair_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:GetPricesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPricesRequest {
    fn default() -> &'a GetPricesRequest {
        <GetPricesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPricesRequest {
    pub fn new() -> GetPricesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "currency_pair_ids",
            |m: &GetPricesRequest| { &m.currency_pair_ids },
            |m: &mut GetPricesRequest| { &mut m.currency_pair_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPricesRequest>(
            "GetPricesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPricesRequest {
    const NAME: &'static str = "GetPricesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.currency_pair_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.currency_pair_ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.currency_pair_ids {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPricesRequest {
        GetPricesRequest::new()
    }

    fn clear(&mut self) {
        self.currency_pair_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPricesRequest {
        static instance: GetPricesRequest = GetPricesRequest {
            currency_pair_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPricesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPricesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPricesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPricesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetPricesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPricesResponse {
    // message fields
    // @@protoc_insertion_point(field:GetPricesResponse.prices)
    pub prices: ::std::vec::Vec<GetPriceResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:GetPricesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPricesResponse {
    fn default() -> &'a GetPricesResponse {
        <GetPricesResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPricesResponse {
    pub fn new() -> GetPricesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "prices",
            |m: &GetPricesResponse| { &m.prices },
            |m: &mut GetPricesResponse| { &mut m.prices },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPricesResponse>(
            "GetPricesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPricesResponse {
    const NAME: &'static str = "GetPricesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.prices.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.prices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.prices {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPricesResponse {
        GetPricesResponse::new()
    }

    fn clear(&mut self) {
        self.prices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPricesResponse {
        static instance: GetPricesResponse = GetPricesResponse {
            prices: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPricesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPricesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPricesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPricesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Extension fields
pub mod exts {

    pub const goproto_stringer: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(64003, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const stringer: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(67008, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const nullable: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(65001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const customtype: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(65003, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const stdtime: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(65010, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const scalar: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(93002, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13slinky_oracle.proto\x1a\x20google/protobuf/descriptor.proto\x1a\
    \x1fgoogle/protobuf/timestamp.proto\"B\n\x0cCurrencyPair\x12\x12\n\x04Ba\
    se\x18\x01\x20\x01(\tR\x04Base\x12\x14\n\x05Quote\x18\x02\x20\x01(\tR\
    \x05Quote:\x08\x80\xdc\x20\0\x98\xa0\x1f\0\"\xc1\x01\n\nQuotePrice\x12A\
    \n\x05price\x18\x01\x20\x01(\tR\x05priceB+\xd2\xb4-\ncosmos.Int\xda\xde\
    \x1f\x15cosmossdk.io/math.Int\xc8\xde\x1f\0\x12M\n\x0fblock_timestamp\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0eblockTimestampB\
    \x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\x12!\n\x0cblock_height\x18\x03\x20\
    \x01(\x04R\x0bblockHeight\"\x1c\n\x1aGetAllCurrencyPairsRequest\"Y\n\x1b\
    GetAllCurrencyPairsResponse\x12:\n\x0ecurrency_pairs\x18\x01\x20\x03(\
    \x0b2\r.CurrencyPairR\rcurrencyPairsB\x04\xc8\xde\x1f\0\"K\n\x0fGetPrice\
    Request\x128\n\rcurrency_pair\x18\x01\x20\x01(\x0b2\r.CurrencyPairR\x0cc\
    urrencyPairB\x04\xc8\xde\x1f\0\"}\n\x10GetPriceResponse\x12'\n\x05price\
    \x18\x01\x20\x01(\x0b2\x0b.QuotePriceR\x05priceB\x04\xc8\xde\x1f\x01\x12\
    \x14\n\x05nonce\x18\x02\x20\x01(\x04R\x05nonce\x12\x1a\n\x08decimals\x18\
    \x03\x20\x01(\x04R\x08decimals\x12\x0e\n\x02id\x18\x04\x20\x01(\x04R\x02\
    id\">\n\x10GetPricesRequest\x12*\n\x11currency_pair_ids\x18\x01\x20\x03(\
    \tR\x0fcurrencyPairIds\"D\n\x11GetPricesResponse\x12/\n\x06prices\x18\
    \x01\x20\x03(\x0b2\x11.GetPriceResponseR\x06pricesB\x04\xc8\xde\x1f\0:O\
    \n\x10goproto_stringer\x18\x83\xf4\x03\x20\x01(\x08\x12\x1f.google.proto\
    buf.MessageOptionsR\x0fgoprotoStringer\x88\x01\x01:@\n\x08stringer\x18\
    \xc0\x8b\x04\x20\x01(\x08\x12\x1f.google.protobuf.MessageOptionsR\x08str\
    inger\x88\x01\x01:>\n\x08nullable\x18\xe9\xfb\x03\x20\x01(\x08\x12\x1d.g\
    oogle.protobuf.FieldOptionsR\x08nullable\x88\x01\x01:B\n\ncustomtype\x18\
    \xeb\xfb\x03\x20\x01(\t\x12\x1d.google.protobuf.FieldOptionsR\ncustomtyp\
    e\x88\x01\x01:<\n\x07stdtime\x18\xf2\xfb\x03\x20\x01(\x08\x12\x1d.google\
    .protobuf.FieldOptionsR\x07stdtime\x88\x01\x01:7\n\x06scalar\x18\xca\xd6\
    \x05\x20\x01(\t\x12\x1d.google.protobuf.FieldOptionsR\x06scalarb\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(CurrencyPair::generated_message_descriptor_data());
            messages.push(QuotePrice::generated_message_descriptor_data());
            messages.push(GetAllCurrencyPairsRequest::generated_message_descriptor_data());
            messages.push(GetAllCurrencyPairsResponse::generated_message_descriptor_data());
            messages.push(GetPriceRequest::generated_message_descriptor_data());
            messages.push(GetPriceResponse::generated_message_descriptor_data());
            messages.push(GetPricesRequest::generated_message_descriptor_data());
            messages.push(GetPricesResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
