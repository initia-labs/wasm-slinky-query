syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";

extend google.protobuf.MessageOptions {
	optional bool goproto_stringer = 64003;
	optional bool stringer = 67008;
}

extend google.protobuf.FieldOptions {
	optional bool nullable = 65001;
	optional string customtype = 65003;
    optional bool stdtime = 65010;

    string scalar = 93002;
}

message CurrencyPair {
  option (goproto_stringer) = false;
  option (stringer) = false;

  string Base = 1;
  string Quote = 2;
}

message QuotePrice {
  string price = 1 [
    (scalar) = "cosmos.Int",
    (customtype) = "cosmossdk.io/math.Int",
    (nullable) = false
  ];

  // BlockTimestamp tracks the block height associated with this price update.
  // We include block timestamp alongside the price to ensure that smart
  // contracts and applications are not utilizing stale oracle prices
  google.protobuf.Timestamp block_timestamp = 2
      [ (nullable) = false, (stdtime) = true ];

  // BlockHeight is height of block mentioned above
  uint64 block_height = 3;
}

message GetAllCurrencyPairsRequest {}

// GetAllCurrencyPairsResponse returns all CurrencyPairs that the module is
// currently tracking
message GetAllCurrencyPairsResponse {
  repeated CurrencyPair currency_pairs = 1
      [ (nullable) = false ];
}

// GetPriceRequest either takes a CurrencyPair, or an identifier for the
// CurrencyPair in the format base/quote
message GetPriceRequest {
  // CurrencyPair represents the pair that the user wishes to query.
  CurrencyPair currency_pair = 1
      [ (nullable) = false ];
}

// GetPriceResponse is the response from the GetPrice grpc method exposed from
// the x/oracle query service
message GetPriceResponse {
  // QuotePrice represents the quote-price for the CurrencyPair given in
  // GetPriceRequest (possibly nil if no update has been made)
  QuotePrice price = 1 [ (nullable) = true ];
  // nonce represents the nonce for the CurrencyPair if it exists in state
  uint64 nonce = 2;
  // decimals represents the number of decimals that the quote-price is
  // represented in. For Pairs where ETHEREUM is the quote this will be 18,
  // otherwise it will be 8.
  uint64 decimals = 3;
  // ID represents the identifier for the CurrencyPair.
  uint64 id = 4;
}

// GetPricesRequest takes an identifier for the CurrencyPair
// in the format base/quote
message GetPricesRequest { repeated string currency_pair_ids = 1; }

// GetPricesResponse is the response from the GetPrices grpc method exposed from
// the x/oracle query service
message GetPricesResponse {
  repeated GetPriceResponse prices = 1 [ (nullable) = false ];
}