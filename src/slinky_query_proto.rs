// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `a.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:slinky.oracle.v1.GetAllCurrencyPairsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAllCurrencyPairsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:slinky.oracle.v1.GetAllCurrencyPairsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllCurrencyPairsRequest {
    fn default() -> &'a GetAllCurrencyPairsRequest {
        <GetAllCurrencyPairsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAllCurrencyPairsRequest {
    pub fn new() -> GetAllCurrencyPairsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllCurrencyPairsRequest>(
            "GetAllCurrencyPairsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllCurrencyPairsRequest {
    const NAME: &'static str = "GetAllCurrencyPairsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllCurrencyPairsRequest {
        GetAllCurrencyPairsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllCurrencyPairsRequest {
        static instance: GetAllCurrencyPairsRequest = GetAllCurrencyPairsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAllCurrencyPairsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllCurrencyPairsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllCurrencyPairsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllCurrencyPairsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  CurrencyPair is the standard representation of a pair of assets, where one
///  (Base) is priced in terms of the other (Quote)
// @@protoc_insertion_point(message:slinky.oracle.v1.CurrencyPair)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CurrencyPair {
    // message fields
    // @@protoc_insertion_point(field:slinky.oracle.v1.CurrencyPair.Base)
    pub Base: ::std::string::String,
    // @@protoc_insertion_point(field:slinky.oracle.v1.CurrencyPair.Quote)
    pub Quote: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:slinky.oracle.v1.CurrencyPair.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CurrencyPair {
    fn default() -> &'a CurrencyPair {
        <CurrencyPair as ::protobuf::Message>::default_instance()
    }
}

impl CurrencyPair {
    pub fn new() -> CurrencyPair {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Base",
            |m: &CurrencyPair| { &m.Base },
            |m: &mut CurrencyPair| { &mut m.Base },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Quote",
            |m: &CurrencyPair| { &m.Quote },
            |m: &mut CurrencyPair| { &mut m.Quote },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CurrencyPair>(
            "CurrencyPair",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CurrencyPair {
    const NAME: &'static str = "CurrencyPair";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Base = is.read_string()?;
                },
                18 => {
                    self.Quote = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Base.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Base);
        }
        if !self.Quote.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Quote);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Base.is_empty() {
            os.write_string(1, &self.Base)?;
        }
        if !self.Quote.is_empty() {
            os.write_string(2, &self.Quote)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CurrencyPair {
        CurrencyPair::new()
    }

    fn clear(&mut self) {
        self.Base.clear();
        self.Quote.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CurrencyPair {
        static instance: CurrencyPair = CurrencyPair {
            Base: ::std::string::String::new(),
            Quote: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CurrencyPair {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CurrencyPair").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CurrencyPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CurrencyPair {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GetPriceRequest either takes a CurrencyPair, or an identifier for the
///  CurrencyPair in the format base/quote
// @@protoc_insertion_point(message:slinky.oracle.v1.GetPriceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPriceRequest {
    // message oneof groups
    pub currency_pair_selector: ::std::option::Option<get_price_request::Currency_pair_selector>,
    // special fields
    // @@protoc_insertion_point(special_field:slinky.oracle.v1.GetPriceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPriceRequest {
    fn default() -> &'a GetPriceRequest {
        <GetPriceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPriceRequest {
    pub fn new() -> GetPriceRequest {
        ::std::default::Default::default()
    }

    // .slinky.oracle.v1.CurrencyPair currency_pair = 1;

    pub fn currency_pair(&self) -> &CurrencyPair {
        match self.currency_pair_selector {
            ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(ref v)) => v,
            _ => <CurrencyPair as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_currency_pair(&mut self) {
        self.currency_pair_selector = ::std::option::Option::None;
    }

    pub fn has_currency_pair(&self) -> bool {
        match self.currency_pair_selector {
            ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_currency_pair(&mut self, v: CurrencyPair) {
        self.currency_pair_selector = ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(v))
    }

    // Mutable pointer to the field.
    pub fn mut_currency_pair(&mut self) -> &mut CurrencyPair {
        if let ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(_)) = self.currency_pair_selector {
        } else {
            self.currency_pair_selector = ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(CurrencyPair::new()));
        }
        match self.currency_pair_selector {
            ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_currency_pair(&mut self) -> CurrencyPair {
        if self.has_currency_pair() {
            match self.currency_pair_selector.take() {
                ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(v)) => v,
                _ => panic!(),
            }
        } else {
            CurrencyPair::new()
        }
    }

    // string currency_pair_id = 2;

    pub fn currency_pair_id(&self) -> &str {
        match self.currency_pair_selector {
            ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_currency_pair_id(&mut self) {
        self.currency_pair_selector = ::std::option::Option::None;
    }

    pub fn has_currency_pair_id(&self) -> bool {
        match self.currency_pair_selector {
            ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_currency_pair_id(&mut self, v: ::std::string::String) {
        self.currency_pair_selector = ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(v))
    }

    // Mutable pointer to the field.
    pub fn mut_currency_pair_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(_)) = self.currency_pair_selector {
        } else {
            self.currency_pair_selector = ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(::std::string::String::new()));
        }
        match self.currency_pair_selector {
            ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_currency_pair_id(&mut self) -> ::std::string::String {
        if self.has_currency_pair_id() {
            match self.currency_pair_selector.take() {
                ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CurrencyPair>(
            "currency_pair",
            GetPriceRequest::has_currency_pair,
            GetPriceRequest::currency_pair,
            GetPriceRequest::mut_currency_pair,
            GetPriceRequest::set_currency_pair,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "currency_pair_id",
            GetPriceRequest::has_currency_pair_id,
            GetPriceRequest::currency_pair_id,
            GetPriceRequest::set_currency_pair_id,
        ));
        oneofs.push(get_price_request::Currency_pair_selector::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPriceRequest>(
            "GetPriceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPriceRequest {
    const NAME: &'static str = "GetPriceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.currency_pair_selector = ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPair(is.read_message()?));
                },
                18 => {
                    self.currency_pair_selector = ::std::option::Option::Some(get_price_request::Currency_pair_selector::CurrencyPairId(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.currency_pair_selector {
            match v {
                &get_price_request::Currency_pair_selector::CurrencyPair(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &get_price_request::Currency_pair_selector::CurrencyPairId(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.currency_pair_selector {
            match v {
                &get_price_request::Currency_pair_selector::CurrencyPair(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &get_price_request::Currency_pair_selector::CurrencyPairId(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPriceRequest {
        GetPriceRequest::new()
    }

    fn clear(&mut self) {
        self.currency_pair_selector = ::std::option::Option::None;
        self.currency_pair_selector = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPriceRequest {
        static instance: GetPriceRequest = GetPriceRequest {
            currency_pair_selector: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPriceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPriceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPriceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPriceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GetPriceRequest`
pub mod get_price_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:slinky.oracle.v1.GetPriceRequest.currency_pair_selector)
    pub enum Currency_pair_selector {
        // @@protoc_insertion_point(oneof_field:slinky.oracle.v1.GetPriceRequest.currency_pair)
        CurrencyPair(super::CurrencyPair),
        // @@protoc_insertion_point(oneof_field:slinky.oracle.v1.GetPriceRequest.currency_pair_id)
        CurrencyPairId(::std::string::String),
    }

    impl ::protobuf::Oneof for Currency_pair_selector {
    }

    impl ::protobuf::OneofFull for Currency_pair_selector {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GetPriceRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("currency_pair_selector").unwrap()).clone()
        }
    }

    impl Currency_pair_selector {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Currency_pair_selector>("currency_pair_selector")
        }
    }
}

///  GetPricesRequest takes an identifier for the CurrencyPair
///  in the format base/quote
// @@protoc_insertion_point(message:slinky.oracle.v1.GetPricesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPricesRequest {
    // message fields
    // @@protoc_insertion_point(field:slinky.oracle.v1.GetPricesRequest.currency_pair_ids)
    pub currency_pair_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:slinky.oracle.v1.GetPricesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPricesRequest {
    fn default() -> &'a GetPricesRequest {
        <GetPricesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPricesRequest {
    pub fn new() -> GetPricesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "currency_pair_ids",
            |m: &GetPricesRequest| { &m.currency_pair_ids },
            |m: &mut GetPricesRequest| { &mut m.currency_pair_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPricesRequest>(
            "GetPricesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPricesRequest {
    const NAME: &'static str = "GetPricesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.currency_pair_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.currency_pair_ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.currency_pair_ids {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPricesRequest {
        GetPricesRequest::new()
    }

    fn clear(&mut self) {
        self.currency_pair_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPricesRequest {
        static instance: GetPricesRequest = GetPricesRequest {
            currency_pair_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPricesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPricesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPricesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPricesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x07a.proto\x12\x10slinky.oracle.v1\"\x1c\n\x1aGetAllCurrencyPairsRequ\
    est\"8\n\x0cCurrencyPair\x12\x12\n\x04Base\x18\x01\x20\x01(\tR\x04Base\
    \x12\x14\n\x05Quote\x18\x02\x20\x01(\tR\x05Quote\"\x9e\x01\n\x0fGetPrice\
    Request\x12E\n\rcurrency_pair\x18\x01\x20\x01(\x0b2\x1e.slinky.oracle.v1\
    .CurrencyPairH\0R\x0ccurrencyPair\x12*\n\x10currency_pair_id\x18\x02\x20\
    \x01(\tH\0R\x0ecurrencyPairIdB\x18\n\x16currency_pair_selector\">\n\x10G\
    etPricesRequest\x12*\n\x11currency_pair_ids\x18\x01\x20\x03(\tR\x0fcurre\
    ncyPairIdsJ\xb1\x07\n\x06\x12\x04\0\0\x1bC\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x19\n\t\n\x02\x04\0\x12\x03\x03\0%\n\
    \n\n\x03\x04\0\x01\x12\x03\x03\x08\"\n\x88\x01\n\x02\x04\x01\x12\x04\x07\
    \0\n\x01\x1a|\x20CurrencyPair\x20is\x20the\x20standard\x20representation\
    \x20of\x20a\x20pair\x20of\x20assets,\x20where\x20one\n\x20(Base)\x20is\
    \x20priced\x20in\x20terms\x20of\x20the\x20other\x20(Quote)\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x07\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x08\
    \x02\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x08\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x08\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\t\x02\x13\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\t\t\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\t\x11\x12\nz\n\
    \x02\x04\x02\x12\x04\x0e\0\x17\x01\x1an\x20GetPriceRequest\x20either\x20\
    takes\x20a\x20CurrencyPair,\x20or\x20an\x20identifier\x20for\x20the\n\
    \x20CurrencyPair\x20in\x20the\x20format\x20base/quote\n\n\n\n\x03\x04\
    \x02\x01\x12\x03\x0e\x08\x17\n~\n\x04\x04\x02\x08\0\x12\x04\x11\x02\x16\
    \x03\x1ap\x20CurrencyPairSelector\x20represents\x20the\x20types\x20that\
    \x20the\x20user\x20may\x20provide\x20to\x20the\n\x20request\x20to\x20ide\
    ntify\x20a\x20CurrencyPair\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03\x11\
    \x08\x1e\n\x20\n\x04\x04\x02\x02\0\x12\x03\x13\x04#\x1a\x13\x20CurrencyP\
    air\x20type\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x13\x04\x10\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x13\x11\x1e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x13!\"\n8\n\x04\x04\x02\x02\x01\x12\x03\x15\x04\x20\x1a+\x20str\
    ing\x20representation\x20of\x20the\x20CurrencyPair\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x15\x0b\x1b\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x15\x1e\x1f\n`\n\
    \x02\x04\x03\x12\x03\x1b\0C\x1aU\x20GetPricesRequest\x20takes\x20an\x20i\
    dentifier\x20for\x20the\x20CurrencyPair\n\x20in\x20the\x20format\x20base\
    /quote\n\n\n\n\x03\x04\x03\x01\x12\x03\x1b\x08\x18\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03\x1b\x1bA\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x1b\x1b#\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1b$*\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x1b+<\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1b?@b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(GetAllCurrencyPairsRequest::generated_message_descriptor_data());
            messages.push(CurrencyPair::generated_message_descriptor_data());
            messages.push(GetPriceRequest::generated_message_descriptor_data());
            messages.push(GetPricesRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
